// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    repositories {
        maven { url 'https://maven.aliyun.com/repository/google/' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        google()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:7.4.1'

        // Add dependency for build script,
        // so we can access Git from our
        // build script.
        classpath 'org.ajoberstar:grgit:1.1.0'
        classpath 'com.jsoniter:jsoniter:0.9.23'
    }
}

allprojects {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/google/' }
        maven { url 'https://maven.aliyun.com/repository/public' }
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

File superpoweredDestinationFolder = new File(rootProject.rootDir, "Superpowered")
File superpoweredZipDestination = new File(rootProject.rootDir, "SuperpoweredSDK.zip")
File superpoweredUnzipDestination = new File(rootProject.rootDir, "SuperpoweredSDK_unzip")
File superpoweredUnzippedSDKSource = superpoweredUnzipDestination.toPath().resolve("SuperpoweredSDK").resolve("Superpowered").toFile()

task downloadSuperpowered {
    doLast {
        println "Downloading Superpowered..."
        ant.get(src: 'https://superpowered.com/SuperpoweredSDK.zip', dest: superpoweredZipDestination.toString(), skipexisting: true)
        println "Download finished"
    }
}

task unzipSuperpowered(dependsOn: downloadSuperpowered, type: Copy) {
    from zipTree(superpoweredZipDestination)
    into superpoweredUnzipDestination
}

task installSuperpowered(dependsOn: unzipSuperpowered, type: Copy) {
    from superpoweredUnzippedSDKSource
    into superpoweredDestinationFolder
}

task cleanSuperpoweredDownload {
    doLast {
        delete superpoweredZipDestination
        delete superpoweredUnzipDestination
    }
}

task deleteSuperpowered(dependsOn: cleanSuperpoweredDownload) {
    doLast {
        delete superpoweredDestinationFolder
    }
}
